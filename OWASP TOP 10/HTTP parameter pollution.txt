# HTTP Parameter Pollution (HPP)

HTTP Parameter Pollution (HPP) is a type of web application vulnerability where an attacker injects multiple HTTP parameters with the same name into a request to interfere with the applicationâ€™s logic or bypass security controls. This can lead to various issues, such as authentication bypass, information disclosure, or other unintended behaviors in the application.

## Types of HPP

1. Client-side HPP
   - Injection in URLs: Adding multiple parameters with the same name in the URL. For example:
     ```
     http://example.com/page?user=admin&user=guest
     ```
   - Form manipulation: Manipulating form fields to include multiple parameters with the same name before submission.

2. Server-side HPP
   - Occurs when the server processes multiple parameters with the same name in a manner that is unexpected or exploitable.

## Common Exploitation Scenarios

1. Authentication Bypass
   - An attacker could manipulate authentication parameters to bypass login mechanisms. For example:
     ```
     http://example.com/login?username=admin&password=wrongpassword&password=correctpassword
     ```

2. Parameter Manipulation
   - Modifying application behavior by injecting multiple parameters. For example, changing a user's role or accessing restricted resources:
     ```
     http://example.com/resource?role=user&role=admin
     ```

3. Information Disclosure
   - Exploiting parameters to reveal sensitive information:
     ```
     http://example.com/api?debug=false&debug=true
     ```

## Prevention and Mitigation

1. Sanitization and Validation
   - Ensure that the application properly validates and sanitizes all input parameters, especially those received via GET and POST requests.

2. Use of Unique Parameter Names
   - Avoid using the same parameter name multiple times in a request. Each parameter should be uniquely named to prevent confusion.

3. Framework-specific Protections
   - Utilize built-in security features of web frameworks to prevent HPP. For example, many frameworks provide middleware or filters to handle such cases.

4. Log and Monitor
   - Implement logging and monitoring to detect unusual parameter usage patterns that might indicate an HPP attack.

5. Use Security Libraries
   - Leverage security libraries and tools designed to detect and prevent parameter pollution attacks.

## Example in Code

### PHP Example

```php
<?php
// Check for multiple parameters with the same name
if (isset($_GET['param'])) {
    if (is_array($_GET['param'])) {
        // Handle parameter pollution case
        // e.g., take the first value, combine them, log an error, etc.
        $param = $_GET['param'][0]; // Simplistic approach
    } else {
        $param = $_GET['param'];
    }
}
?>
